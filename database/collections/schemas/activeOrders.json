{
  "bsonType": "object",
  "required": ["createdAt", "orderName", "affectedWheelStacks", "affectedWheels",
    "orderDescription", "source", "destination", "orderType", "status", "lastUpdated"],
  "properties": {
    "_id": {
      "bsonType": "objectId",
      "description": "Unique identifier for the order"
    },
    "orderName": {
      "bsonType": "string",
      "description": "Optional order name"
    },
    "orderDescription": {
      "bsonType": "string",
      "description": "Optional order description"
    },
    "createdAt": {
      "bsonType": "date",
      "description": "Timestamp for when the order was created"
    },
    "lastUpdated": {
      "bsonType": "date",
      "description": "Timestamp for the last update of the order"
    },
    "source": {
      "bsonType": "object",
      "required": ["placementType", "placementId", "rowPlacement", "columnPlacement"],
      "properties": {
        "placementType": {
          "bsonType": "string",
          "enum": ["grid", "basePlatform", "storage"],
          "description": "Source type (`grid` or `basePlatform`), from where we're taking it"
        },
        "placementId": {
          "bsonType": "objectId",
          "description": "objectId of the placement (we can have multiple `grid`s `basePlatform`s with the same `preset`)"
        },
        "rowPlacement": {
          "bsonType": "string",
          "description": "string identifier for the `row` of a source cell"
        },
        "columnPlacement": {
          "bsonType": "string",
          "description": "string identifier for the `column` of a source cell"
        }
      }
    },
    "destination": {
      "bsonType": "object",
      "required": ["placementType", "placementId","rowPlacement", "columnPlacement"],
      "properties": {
        "placementType": {
          "bsonType": "string",
          "enum": ["grid", "storage"],
          "description": "We can move only from `basePlatform` -> `grid` or inside the `grid. Even if we `moveToLaboratory` we still move `wheelStack` to some `extra` element in a `grid` and later it's transitioned to lab"
        },
        "placementId": {
          "bsonType": "objectId",
          "description": "objectId of the placement (we can have multiple `grid`s `basePlatform`s with the same `preset`)"
        },
        "rowPlacement": {
          "bsonType": "string",
          "description": "string identifier for the `row` of a destination cell"
        },
        "columnPlacement": {
          "bsonType": "string",
          "description": "string identifier for the `column` of a destination cell"
        }
      }
    },
    "orderType": {
      "bsonType": "string",
      "enum": ["moveWholeStack", "moveTopWheel", "moveToLaboratory", "mergeWheelStacks", "moveToProcessing", "moveToRejected", "moveToStorage"],
      "description": "Type of operation (moveWholeStack, moveTopWheel, moveToLaboratory, mergeWheelStack)"
    },
    "affectedWheelStacks": {
      "bsonType": "object",
      "required": ["source", "destination"],
      "properties": {
        "source": {
          "bsonType": ["objectId"],
          "description": "`objectId` of the wheelstack currently placed on the source cell, source cell can't be empty"
        },
        "destination": {
          "bsonType": ["null","objectId"],
          "description": "`objectId` of the wheelStack currently placed on the destination cell, destination cell can be empty"
        }
      }
    },
    "affectedWheels": {
      "bsonType": "object",
      "required": ["source", "destination"],
      "properties": {
        "source": {
          "bsonType": "array",
          "items": {
            "bsonType": "objectId",
            "description": "`objectId`'s of the wheels stored in affected wheelStack on the source cell"
          }
        },
        "destination": {
          "bsonType": "array",
          "items": {
            "bsonType": "objectId",
            "description": "`objectId`'s of the wheels stored in affected wheelStack on the destination cell"
            }
          }
        }
    },
    "status": {
      "bsonType": "string",
      "enum": ["pending"],
      "description": "Status of the order, in `activeOrder` we can only have `pending` orders"
    }
  },
  "indexes": [
  { "keys": { "createdAt": -1 }, "options": { "name": "createdAt_desc_index" } },
  { "keys": { "orderType": 1, "createdAt": -1 }, "options": { "name": "orderType_createdAt_index" } },
  { "keys": { "lastUpdated": -1 }, "options": { "name": "lastUpdated_desc_index" } },
  { "keys": { "orderName": 1 }, "options": { "name": "orderName_index" } },
  { "keys": { "orderType": 1, "status": 1 }, "options": { "name": "orderType_status_index" } },
  { "keys": { "orderType": 1, "status": 1, "createdAt": -1 }, "options": { "name": "orderType_status_createdAt_index" } },
  { "keys": { "orderType": 1, "lastUpdated": -1 }, "options": { "name": "orderType_lastUpdated_index" } },
  { "keys": { "status": 1, "createdAt": -1 }, "options": { "name": "status_createdAt_index" } }
]
}
